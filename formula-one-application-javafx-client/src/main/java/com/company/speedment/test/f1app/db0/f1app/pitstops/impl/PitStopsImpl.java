package com.company.speedment.test.f1app.db0.f1app.pitstops.impl;

import com.company.speedment.test.f1app.db0.f1app.pitstops.PitStops;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.sql.Time;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@56bc73.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class PitStopsImpl extends AbstractBaseEntity<PitStops> implements PitStops {
    
    private Integer raceId;
    private Integer driverId;
    private Integer stop;
    private Integer lap;
    private Time time;
    private String duration;
    private Integer milliseconds;
    
    PitStopsImpl(Speedment speedment) {
        super(speedment);
    }
    
    public PitStopsImpl(Speedment speedment, final PitStops pitStops) {
        super(speedment);
        setRaceId(pitStops.getRaceId());
        setDriverId(pitStops.getDriverId());
        setStop(pitStops.getStop());
        setLap(pitStops.getLap());
        setTime(pitStops.getTime());
        pitStops.getDuration().ifPresent(this::setDuration);
        pitStops.getMilliseconds().ifPresent(this::setMilliseconds);
    }
    
    @Override
    public Integer getRaceId() {
        return raceId;
    }
    
    @Override
    public Integer getDriverId() {
        return driverId;
    }
    
    @Override
    public Integer getStop() {
        return stop;
    }
    
    @Override
    public Integer getLap() {
        return lap;
    }
    
    @Override
    public Time getTime() {
        return time;
    }
    
    @Override
    public Optional<String> getDuration() {
        return Optional.ofNullable(duration);
    }
    
    @Override
    public Optional<Integer> getMilliseconds() {
        return Optional.ofNullable(milliseconds);
    }
    
    @Override
    public final PitStopsImpl setRaceId(Integer raceId) {
        this.raceId = raceId;
        return this;
    }
    
    @Override
    public final PitStopsImpl setDriverId(Integer driverId) {
        this.driverId = driverId;
        return this;
    }
    
    @Override
    public final PitStopsImpl setStop(Integer stop) {
        this.stop = stop;
        return this;
    }
    
    @Override
    public final PitStopsImpl setLap(Integer lap) {
        this.lap = lap;
        return this;
    }
    
    @Override
    public final PitStopsImpl setTime(Time time) {
        this.time = time;
        return this;
    }
    
    @Override
    public final PitStopsImpl setDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    @Override
    public final PitStopsImpl setMilliseconds(Integer milliseconds) {
        this.milliseconds = milliseconds;
        return this;
    }
    
    @Override
    public PitStops copy() {
        return new PitStopsImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("raceId = "+Objects.toString(getRaceId()));
        sj.add("driverId = "+Objects.toString(getDriverId()));
        sj.add("stop = "+Objects.toString(getStop()));
        sj.add("lap = "+Objects.toString(getLap()));
        sj.add("time = "+Objects.toString(getTime()));
        sj.add("duration = "+Objects.toString(getDuration().orElse(null)));
        sj.add("milliseconds = "+Objects.toString(getMilliseconds().orElse(null)));
        return "PitStopsImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof PitStops)) { return false; }
        @SuppressWarnings("unchecked")
        final PitStops thatPitStops = (PitStops)that;
        if (!Objects.equals(this.getRaceId(), thatPitStops.getRaceId())) {return false; }
        if (!Objects.equals(this.getDriverId(), thatPitStops.getDriverId())) {return false; }
        if (!Objects.equals(this.getStop(), thatPitStops.getStop())) {return false; }
        if (!Objects.equals(this.getLap(), thatPitStops.getLap())) {return false; }
        if (!Objects.equals(this.getTime(), thatPitStops.getTime())) {return false; }
        if (!Objects.equals(this.getDuration(), thatPitStops.getDuration())) {return false; }
        if (!Objects.equals(this.getMilliseconds(), thatPitStops.getMilliseconds())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getRaceId());
        hash = 31 * hash + Objects.hashCode(getDriverId());
        hash = 31 * hash + Objects.hashCode(getStop());
        hash = 31 * hash + Objects.hashCode(getLap());
        hash = 31 * hash + Objects.hashCode(getTime());
        hash = 31 * hash + Objects.hashCode(getDuration());
        hash = 31 * hash + Objects.hashCode(getMilliseconds());
        return hash;
    }
    
    @Override
    public Class<PitStops> getEntityClass_() {
        return PitStops.class;
    }
}