package com.company.speedment.test.f1app.db0.f1app.drivers.impl;

import com.company.speedment.test.f1app.db0.f1app.drivers.Drivers;
import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.DateIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@682fb3c4.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class DriversManagerImpl extends AbstractSqlManager<Drivers> {
    
    private final TypeMapper<Integer, Integer> driverIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> driverRefTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> numberTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> codeTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> forenameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> surnameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Date, Date> dobTypeMapper = new DateIdentityMapper();
    private final TypeMapper<String, String> nationalityTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> urlTypeMapper = new StringIdentityMapper();
    
    public DriversManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Drivers> getEntityClass() {
        return Drivers.class;
    }
    
    @Override
    public Object get(Drivers entity, Column column) {
        switch (column.getName()) {
            case "driverId" : return entity.getDriverId();
            case "driverRef" : return entity.getDriverRef();
            case "number" : return entity.getNumber();
            case "code" : return entity.getCode();
            case "forename" : return entity.getForename();
            case "surname" : return entity.getSurname();
            case "dob" : return entity.getDob();
            case "nationality" : return entity.getNationality();
            case "url" : return entity.getUrl();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Drivers entity, Column column, Object value) {
        switch (column.getName()) {
            case "driverId" : entity.setDriverId((Integer) value); break;
            case "driverRef" : entity.setDriverRef((String) value); break;
            case "number" : entity.setNumber((Integer) value); break;
            case "code" : entity.setCode((String) value); break;
            case "forename" : entity.setForename((String) value); break;
            case "surname" : entity.setSurname((String) value); break;
            case "dob" : entity.setDob((Date) value); break;
            case "nationality" : entity.setNationality((String) value); break;
            case "url" : entity.setUrl((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("db0.F1APP.drivers");
    }
    
    protected Drivers defaultReadEntity(ResultSet resultSet) {
        final Drivers entity = newInstance();
        try {
            entity.setDriverId(driverIdTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setDriverRef(driverRefTypeMapper.toJavaType(resultSet.getString(2)));
            entity.setNumber(numberTypeMapper.toJavaType(getInt(resultSet, 3)));
            entity.setCode(codeTypeMapper.toJavaType(resultSet.getString(4)));
            entity.setForename(forenameTypeMapper.toJavaType(resultSet.getString(5)));
            entity.setSurname(surnameTypeMapper.toJavaType(resultSet.getString(6)));
            entity.setDob(dobTypeMapper.toJavaType(resultSet.getDate(7)));
            entity.setNationality(nationalityTypeMapper.toJavaType(resultSet.getString(8)));
            entity.setUrl(urlTypeMapper.toJavaType(resultSet.getString(9)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Drivers newInstance() {
        return new DriversImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Drivers entity) {
        return entity.getDriverId();
    }
}