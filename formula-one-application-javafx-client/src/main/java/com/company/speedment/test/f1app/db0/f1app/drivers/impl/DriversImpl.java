package com.company.speedment.test.f1app.db0.f1app.drivers.impl;

import com.company.speedment.test.f1app.db0.f1app.drivers.Drivers;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.sql.Date;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@682fb3c4.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class DriversImpl extends AbstractBaseEntity<Drivers> implements Drivers {
    
    private Integer driverId;
    private String driverRef;
    private Integer number;
    private String code;
    private String forename;
    private String surname;
    private Date dob;
    private String nationality;
    private String url;
    
    DriversImpl(Speedment speedment) {
        super(speedment);
    }
    
    public DriversImpl(Speedment speedment, final Drivers drivers) {
        super(speedment);
        setDriverId(drivers.getDriverId());
        setDriverRef(drivers.getDriverRef());
        drivers.getNumber().ifPresent(this::setNumber);
        drivers.getCode().ifPresent(this::setCode);
        setForename(drivers.getForename());
        setSurname(drivers.getSurname());
        drivers.getDob().ifPresent(this::setDob);
        drivers.getNationality().ifPresent(this::setNationality);
        setUrl(drivers.getUrl());
    }
    
    @Override
    public Integer getDriverId() {
        return driverId;
    }
    
    @Override
    public String getDriverRef() {
        return driverRef;
    }
    
    @Override
    public Optional<Integer> getNumber() {
        return Optional.ofNullable(number);
    }
    
    @Override
    public Optional<String> getCode() {
        return Optional.ofNullable(code);
    }
    
    @Override
    public String getForename() {
        return forename;
    }
    
    @Override
    public String getSurname() {
        return surname;
    }
    
    @Override
    public Optional<Date> getDob() {
        return Optional.ofNullable(dob);
    }
    
    @Override
    public Optional<String> getNationality() {
        return Optional.ofNullable(nationality);
    }
    
    @Override
    public String getUrl() {
        return url;
    }
    
    @Override
    public final DriversImpl setDriverId(Integer driverId) {
        this.driverId = driverId;
        return this;
    }
    
    @Override
    public final DriversImpl setDriverRef(String driverRef) {
        this.driverRef = driverRef;
        return this;
    }
    
    @Override
    public final DriversImpl setNumber(Integer number) {
        this.number = number;
        return this;
    }
    
    @Override
    public final DriversImpl setCode(String code) {
        this.code = code;
        return this;
    }
    
    @Override
    public final DriversImpl setForename(String forename) {
        this.forename = forename;
        return this;
    }
    
    @Override
    public final DriversImpl setSurname(String surname) {
        this.surname = surname;
        return this;
    }
    
    @Override
    public final DriversImpl setDob(Date dob) {
        this.dob = dob;
        return this;
    }
    
    @Override
    public final DriversImpl setNationality(String nationality) {
        this.nationality = nationality;
        return this;
    }
    
    @Override
    public final DriversImpl setUrl(String url) {
        this.url = url;
        return this;
    }
    
    @Override
    public Drivers copy() {
        return new DriversImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("driverId = "+Objects.toString(getDriverId()));
        sj.add("driverRef = "+Objects.toString(getDriverRef()));
        sj.add("number = "+Objects.toString(getNumber().orElse(null)));
        sj.add("code = "+Objects.toString(getCode().orElse(null)));
        sj.add("forename = "+Objects.toString(getForename()));
        sj.add("surname = "+Objects.toString(getSurname()));
        sj.add("dob = "+Objects.toString(getDob().orElse(null)));
        sj.add("nationality = "+Objects.toString(getNationality().orElse(null)));
        sj.add("url = "+Objects.toString(getUrl()));
        return "DriversImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Drivers)) { return false; }
        @SuppressWarnings("unchecked")
        final Drivers thatDrivers = (Drivers)that;
        if (!Objects.equals(this.getDriverId(), thatDrivers.getDriverId())) {return false; }
        if (!Objects.equals(this.getDriverRef(), thatDrivers.getDriverRef())) {return false; }
        if (!Objects.equals(this.getNumber(), thatDrivers.getNumber())) {return false; }
        if (!Objects.equals(this.getCode(), thatDrivers.getCode())) {return false; }
        if (!Objects.equals(this.getForename(), thatDrivers.getForename())) {return false; }
        if (!Objects.equals(this.getSurname(), thatDrivers.getSurname())) {return false; }
        if (!Objects.equals(this.getDob(), thatDrivers.getDob())) {return false; }
        if (!Objects.equals(this.getNationality(), thatDrivers.getNationality())) {return false; }
        if (!Objects.equals(this.getUrl(), thatDrivers.getUrl())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getDriverId());
        hash = 31 * hash + Objects.hashCode(getDriverRef());
        hash = 31 * hash + Objects.hashCode(getNumber());
        hash = 31 * hash + Objects.hashCode(getCode());
        hash = 31 * hash + Objects.hashCode(getForename());
        hash = 31 * hash + Objects.hashCode(getSurname());
        hash = 31 * hash + Objects.hashCode(getDob());
        hash = 31 * hash + Objects.hashCode(getNationality());
        hash = 31 * hash + Objects.hashCode(getUrl());
        return hash;
    }
    
    @Override
    public Class<Drivers> getEntityClass_() {
        return Drivers.class;
    }
}