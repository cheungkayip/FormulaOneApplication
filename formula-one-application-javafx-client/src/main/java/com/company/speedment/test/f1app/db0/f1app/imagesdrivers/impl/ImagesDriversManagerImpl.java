package com.company.speedment.test.f1app.db0.f1app.imagesdrivers.impl;

import com.company.speedment.test.f1app.db0.f1app.imagesdrivers.ImagesDrivers;
import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@4c6393b5.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class ImagesDriversManagerImpl extends AbstractSqlManager<ImagesDrivers> {
    
    private final TypeMapper<String, String> driverDisplayImageTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> driverHelmetTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> lastNameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> driverImageIdTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> driverFlagTypeMapper = new StringIdentityMapper();
    
    public ImagesDriversManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<ImagesDrivers> getEntityClass() {
        return ImagesDrivers.class;
    }
    
    @Override
    public Object get(ImagesDrivers entity, Column column) {
        switch (column.getName()) {
            case "driverDisplayImage" : return entity.getDriverDisplayImage();
            case "driverHelmet" : return entity.getDriverHelmet();
            case "LastName" : return entity.getLastName();
            case "driverImageId" : return entity.getDriverImageId();
            case "driverFlag" : return entity.getDriverFlag();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(ImagesDrivers entity, Column column, Object value) {
        switch (column.getName()) {
            case "driverDisplayImage" : entity.setDriverDisplayImage((String) value); break;
            case "driverHelmet" : entity.setDriverHelmet((String) value); break;
            case "LastName" : entity.setLastName((String) value); break;
            case "driverImageId" : entity.setDriverImageId((String) value); break;
            case "driverFlag" : entity.setDriverFlag((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("db0.F1APP.ImagesDrivers");
    }
    
    protected ImagesDrivers defaultReadEntity(ResultSet resultSet) {
        final ImagesDrivers entity = newInstance();
        try {
            entity.setDriverDisplayImage(driverDisplayImageTypeMapper.toJavaType(resultSet.getString(1)));
            entity.setDriverHelmet(driverHelmetTypeMapper.toJavaType(resultSet.getString(2)));
            entity.setLastName(lastNameTypeMapper.toJavaType(resultSet.getString(3)));
            entity.setDriverImageId(driverImageIdTypeMapper.toJavaType(resultSet.getString(4)));
            entity.setDriverFlag(driverFlagTypeMapper.toJavaType(resultSet.getString(5)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public ImagesDrivers newInstance() {
        return new ImagesDriversImpl(speedment);
    }
    
    @Override
    public String primaryKeyFor(ImagesDrivers entity) {
        return entity.getDriverImageId();
    }
}