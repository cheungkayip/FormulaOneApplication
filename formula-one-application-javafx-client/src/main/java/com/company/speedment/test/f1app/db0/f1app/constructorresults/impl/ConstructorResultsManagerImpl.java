package com.company.speedment.test.f1app.db0.f1app.constructorresults.impl;

import com.company.speedment.test.f1app.db0.f1app.constructorresults.ConstructorResults;
import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.FloatIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@3fe7df31.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class ConstructorResultsManagerImpl extends AbstractSqlManager<ConstructorResults> {
    
    private final TypeMapper<Integer, Integer> constructorResultsIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> raceIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> constructorIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Float, Float> pointsTypeMapper = new FloatIdentityMapper();
    private final TypeMapper<String, String> statusTypeMapper = new StringIdentityMapper();
    
    public ConstructorResultsManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<ConstructorResults> getEntityClass() {
        return ConstructorResults.class;
    }
    
    @Override
    public Object get(ConstructorResults entity, Column column) {
        switch (column.getName()) {
            case "constructorResultsId" : return entity.getConstructorResultsId();
            case "raceId" : return entity.getRaceId();
            case "constructorId" : return entity.getConstructorId();
            case "points" : return entity.getPoints();
            case "status" : return entity.getStatus();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(ConstructorResults entity, Column column, Object value) {
        switch (column.getName()) {
            case "constructorResultsId" : entity.setConstructorResultsId((Integer) value); break;
            case "raceId" : entity.setRaceId((Integer) value); break;
            case "constructorId" : entity.setConstructorId((Integer) value); break;
            case "points" : entity.setPoints((Float) value); break;
            case "status" : entity.setStatus((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("db0.F1APP.constructorResults");
    }
    
    protected ConstructorResults defaultReadEntity(ResultSet resultSet) {
        final ConstructorResults entity = newInstance();
        try {
            entity.setConstructorResultsId(constructorResultsIdTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setRaceId(raceIdTypeMapper.toJavaType(resultSet.getInt(2)));
            entity.setConstructorId(constructorIdTypeMapper.toJavaType(resultSet.getInt(3)));
            entity.setPoints(pointsTypeMapper.toJavaType(getFloat(resultSet, 4)));
            entity.setStatus(statusTypeMapper.toJavaType(resultSet.getString(5)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public ConstructorResults newInstance() {
        return new ConstructorResultsImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(ConstructorResults entity) {
        return entity.getConstructorResultsId();
    }
}