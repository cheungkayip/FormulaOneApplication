package com.company.speedment.test.f1app.db0.f1app.results.impl;

import com.company.speedment.test.f1app.db0.f1app.results.Results;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the Table
 * 'f1app.db0.F1APP.results'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class ResultsImpl extends AbstractBaseEntity<Results> implements Results {
    
    private Integer resultId;
    private Integer raceId;
    private Integer driverId;
    private Integer constructorId;
    private Integer number;
    private Integer grid;
    private Integer position;
    private String positionText;
    private Integer positionOrder;
    private Float points;
    private Integer laps;
    private String time;
    private Integer milliseconds;
    private Integer fastestLap;
    private Integer rank;
    private String fastestLapTime;
    private String fastestLapSpeed;
    private Integer statusId;
    
    ResultsImpl(Speedment speedment) {
        super(speedment);
    }
    
    public ResultsImpl(Speedment speedment, final Results results) {
        super(speedment);
        setResultId(results.getResultId());
        setRaceId(results.getRaceId());
        setDriverId(results.getDriverId());
        setConstructorId(results.getConstructorId());
        setNumber(results.getNumber());
        setGrid(results.getGrid());
        results.getPosition().ifPresent(this::setPosition);
        setPositionText(results.getPositionText());
        setPositionOrder(results.getPositionOrder());
        setPoints(results.getPoints());
        setLaps(results.getLaps());
        results.getTime().ifPresent(this::setTime);
        results.getMilliseconds().ifPresent(this::setMilliseconds);
        results.getFastestLap().ifPresent(this::setFastestLap);
        results.getRank().ifPresent(this::setRank);
        results.getFastestLapTime().ifPresent(this::setFastestLapTime);
        results.getFastestLapSpeed().ifPresent(this::setFastestLapSpeed);
        setStatusId(results.getStatusId());
    }
    
    @Override
    public Integer getResultId() {
        return resultId;
    }
    
    @Override
    public Integer getRaceId() {
        return raceId;
    }
    
    @Override
    public Integer getDriverId() {
        return driverId;
    }
    
    @Override
    public Integer getConstructorId() {
        return constructorId;
    }
    
    @Override
    public Integer getNumber() {
        return number;
    }
    
    @Override
    public Integer getGrid() {
        return grid;
    }
    
    @Override
    public Optional<Integer> getPosition() {
        return Optional.ofNullable(position);
    }
    
    @Override
    public String getPositionText() {
        return positionText;
    }
    
    @Override
    public Integer getPositionOrder() {
        return positionOrder;
    }
    
    @Override
    public Float getPoints() {
        return points;
    }
    
    @Override
    public Integer getLaps() {
        return laps;
    }
    
    @Override
    public Optional<String> getTime() {
        return Optional.ofNullable(time);
    }
    
    @Override
    public Optional<Integer> getMilliseconds() {
        return Optional.ofNullable(milliseconds);
    }
    
    @Override
    public Optional<Integer> getFastestLap() {
        return Optional.ofNullable(fastestLap);
    }
    
    @Override
    public Optional<Integer> getRank() {
        return Optional.ofNullable(rank);
    }
    
    @Override
    public Optional<String> getFastestLapTime() {
        return Optional.ofNullable(fastestLapTime);
    }
    
    @Override
    public Optional<String> getFastestLapSpeed() {
        return Optional.ofNullable(fastestLapSpeed);
    }
    
    @Override
    public Integer getStatusId() {
        return statusId;
    }
    
    @Override
    public final ResultsImpl setResultId(Integer resultId) {
        this.resultId = resultId;
        return this;
    }
    
    @Override
    public final ResultsImpl setRaceId(Integer raceId) {
        this.raceId = raceId;
        return this;
    }
    
    @Override
    public final ResultsImpl setDriverId(Integer driverId) {
        this.driverId = driverId;
        return this;
    }
    
    @Override
    public final ResultsImpl setConstructorId(Integer constructorId) {
        this.constructorId = constructorId;
        return this;
    }
    
    @Override
    public final ResultsImpl setNumber(Integer number) {
        this.number = number;
        return this;
    }
    
    @Override
    public final ResultsImpl setGrid(Integer grid) {
        this.grid = grid;
        return this;
    }
    
    @Override
    public final ResultsImpl setPosition(Integer position) {
        this.position = position;
        return this;
    }
    
    @Override
    public final ResultsImpl setPositionText(String positionText) {
        this.positionText = positionText;
        return this;
    }
    
    @Override
    public final ResultsImpl setPositionOrder(Integer positionOrder) {
        this.positionOrder = positionOrder;
        return this;
    }
    
    @Override
    public final ResultsImpl setPoints(Float points) {
        this.points = points;
        return this;
    }
    
    @Override
    public final ResultsImpl setLaps(Integer laps) {
        this.laps = laps;
        return this;
    }
    
    @Override
    public final ResultsImpl setTime(String time) {
        this.time = time;
        return this;
    }
    
    @Override
    public final ResultsImpl setMilliseconds(Integer milliseconds) {
        this.milliseconds = milliseconds;
        return this;
    }
    
    @Override
    public final ResultsImpl setFastestLap(Integer fastestLap) {
        this.fastestLap = fastestLap;
        return this;
    }
    
    @Override
    public final ResultsImpl setRank(Integer rank) {
        this.rank = rank;
        return this;
    }
    
    @Override
    public final ResultsImpl setFastestLapTime(String fastestLapTime) {
        this.fastestLapTime = fastestLapTime;
        return this;
    }
    
    @Override
    public final ResultsImpl setFastestLapSpeed(String fastestLapSpeed) {
        this.fastestLapSpeed = fastestLapSpeed;
        return this;
    }
    
    @Override
    public final ResultsImpl setStatusId(Integer statusId) {
        this.statusId = statusId;
        return this;
    }
    
    @Override
    public Results copy() {
        return new ResultsImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("resultId = "+Objects.toString(getResultId()));
        sj.add("raceId = "+Objects.toString(getRaceId()));
        sj.add("driverId = "+Objects.toString(getDriverId()));
        sj.add("constructorId = "+Objects.toString(getConstructorId()));
        sj.add("number = "+Objects.toString(getNumber()));
        sj.add("grid = "+Objects.toString(getGrid()));
        sj.add("position = "+Objects.toString(getPosition().orElse(null)));
        sj.add("positionText = "+Objects.toString(getPositionText()));
        sj.add("positionOrder = "+Objects.toString(getPositionOrder()));
        sj.add("points = "+Objects.toString(getPoints()));
        sj.add("laps = "+Objects.toString(getLaps()));
        sj.add("time = "+Objects.toString(getTime().orElse(null)));
        sj.add("milliseconds = "+Objects.toString(getMilliseconds().orElse(null)));
        sj.add("fastestLap = "+Objects.toString(getFastestLap().orElse(null)));
        sj.add("rank = "+Objects.toString(getRank().orElse(null)));
        sj.add("fastestLapTime = "+Objects.toString(getFastestLapTime().orElse(null)));
        sj.add("fastestLapSpeed = "+Objects.toString(getFastestLapSpeed().orElse(null)));
        sj.add("statusId = "+Objects.toString(getStatusId()));
        return "ResultsImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Results)) { return false; }
        @SuppressWarnings("unchecked")
        final Results thatResults = (Results)that;
        if (!Objects.equals(this.getResultId(), thatResults.getResultId())) {return false; }
        if (!Objects.equals(this.getRaceId(), thatResults.getRaceId())) {return false; }
        if (!Objects.equals(this.getDriverId(), thatResults.getDriverId())) {return false; }
        if (!Objects.equals(this.getConstructorId(), thatResults.getConstructorId())) {return false; }
        if (!Objects.equals(this.getNumber(), thatResults.getNumber())) {return false; }
        if (!Objects.equals(this.getGrid(), thatResults.getGrid())) {return false; }
        if (!Objects.equals(this.getPosition(), thatResults.getPosition())) {return false; }
        if (!Objects.equals(this.getPositionText(), thatResults.getPositionText())) {return false; }
        if (!Objects.equals(this.getPositionOrder(), thatResults.getPositionOrder())) {return false; }
        if (!Objects.equals(this.getPoints(), thatResults.getPoints())) {return false; }
        if (!Objects.equals(this.getLaps(), thatResults.getLaps())) {return false; }
        if (!Objects.equals(this.getTime(), thatResults.getTime())) {return false; }
        if (!Objects.equals(this.getMilliseconds(), thatResults.getMilliseconds())) {return false; }
        if (!Objects.equals(this.getFastestLap(), thatResults.getFastestLap())) {return false; }
        if (!Objects.equals(this.getRank(), thatResults.getRank())) {return false; }
        if (!Objects.equals(this.getFastestLapTime(), thatResults.getFastestLapTime())) {return false; }
        if (!Objects.equals(this.getFastestLapSpeed(), thatResults.getFastestLapSpeed())) {return false; }
        if (!Objects.equals(this.getStatusId(), thatResults.getStatusId())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getResultId());
        hash = 31 * hash + Objects.hashCode(getRaceId());
        hash = 31 * hash + Objects.hashCode(getDriverId());
        hash = 31 * hash + Objects.hashCode(getConstructorId());
        hash = 31 * hash + Objects.hashCode(getNumber());
        hash = 31 * hash + Objects.hashCode(getGrid());
        hash = 31 * hash + Objects.hashCode(getPosition());
        hash = 31 * hash + Objects.hashCode(getPositionText());
        hash = 31 * hash + Objects.hashCode(getPositionOrder());
        hash = 31 * hash + Objects.hashCode(getPoints());
        hash = 31 * hash + Objects.hashCode(getLaps());
        hash = 31 * hash + Objects.hashCode(getTime());
        hash = 31 * hash + Objects.hashCode(getMilliseconds());
        hash = 31 * hash + Objects.hashCode(getFastestLap());
        hash = 31 * hash + Objects.hashCode(getRank());
        hash = 31 * hash + Objects.hashCode(getFastestLapTime());
        hash = 31 * hash + Objects.hashCode(getFastestLapSpeed());
        hash = 31 * hash + Objects.hashCode(getStatusId());
        return hash;
    }
    
    @Override
    public Class<Results> getEntityClass_() {
        return Results.class;
    }
}