package com.company.speedment.test.f1app.db0.f1app.qualifying.impl;

import com.company.speedment.test.f1app.db0.f1app.qualifying.Qualifying;
import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@51f0afdf.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class QualifyingManagerImpl extends AbstractSqlManager<Qualifying> {
    
    private final TypeMapper<Integer, Integer> qualifyIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> raceIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> driverIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> constructorIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> numberTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> positionTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> q1TypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> q2TypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> q3TypeMapper = new StringIdentityMapper();
    
    public QualifyingManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Qualifying> getEntityClass() {
        return Qualifying.class;
    }
    
    @Override
    public Object get(Qualifying entity, Column column) {
        switch (column.getName()) {
            case "qualifyId" : return entity.getQualifyId();
            case "raceId" : return entity.getRaceId();
            case "driverId" : return entity.getDriverId();
            case "constructorId" : return entity.getConstructorId();
            case "number" : return entity.getNumber();
            case "position" : return entity.getPosition();
            case "q1" : return entity.getQ1();
            case "q2" : return entity.getQ2();
            case "q3" : return entity.getQ3();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Qualifying entity, Column column, Object value) {
        switch (column.getName()) {
            case "qualifyId" : entity.setQualifyId((Integer) value); break;
            case "raceId" : entity.setRaceId((Integer) value); break;
            case "driverId" : entity.setDriverId((Integer) value); break;
            case "constructorId" : entity.setConstructorId((Integer) value); break;
            case "number" : entity.setNumber((Integer) value); break;
            case "position" : entity.setPosition((Integer) value); break;
            case "q1" : entity.setQ1((String) value); break;
            case "q2" : entity.setQ2((String) value); break;
            case "q3" : entity.setQ3((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("db0.F1APP.qualifying");
    }
    
    protected Qualifying defaultReadEntity(ResultSet resultSet) {
        final Qualifying entity = newInstance();
        try {
            entity.setQualifyId(qualifyIdTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setRaceId(raceIdTypeMapper.toJavaType(resultSet.getInt(2)));
            entity.setDriverId(driverIdTypeMapper.toJavaType(resultSet.getInt(3)));
            entity.setConstructorId(constructorIdTypeMapper.toJavaType(resultSet.getInt(4)));
            entity.setNumber(numberTypeMapper.toJavaType(resultSet.getInt(5)));
            entity.setPosition(positionTypeMapper.toJavaType(getInt(resultSet, 6)));
            entity.setQ1(q1TypeMapper.toJavaType(resultSet.getString(7)));
            entity.setQ2(q2TypeMapper.toJavaType(resultSet.getString(8)));
            entity.setQ3(q3TypeMapper.toJavaType(resultSet.getString(9)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Qualifying newInstance() {
        return new QualifyingImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Qualifying entity) {
        return entity.getQualifyId();
    }
}