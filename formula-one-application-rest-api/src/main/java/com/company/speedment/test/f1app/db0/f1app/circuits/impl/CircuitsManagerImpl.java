package com.company.speedment.test.f1app.db0.f1app.circuits.impl;

import com.company.speedment.test.f1app.db0.f1app.circuits.Circuits;
import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.FloatIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@19756a05.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class CircuitsManagerImpl extends AbstractSqlManager<Circuits> {
    
    private final TypeMapper<Integer, Integer> circuitIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> circuitRefTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> nameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> locationTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> countryTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Float, Float> latTypeMapper = new FloatIdentityMapper();
    private final TypeMapper<Float, Float> lngTypeMapper = new FloatIdentityMapper();
    private final TypeMapper<Integer, Integer> altTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> urlTypeMapper = new StringIdentityMapper();
    
    public CircuitsManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Circuits> getEntityClass() {
        return Circuits.class;
    }
    
    @Override
    public Object get(Circuits entity, Column column) {
        switch (column.getName()) {
            case "circuitId" : return entity.getCircuitId();
            case "circuitRef" : return entity.getCircuitRef();
            case "name" : return entity.getName();
            case "location" : return entity.getLocation();
            case "country" : return entity.getCountry();
            case "lat" : return entity.getLat();
            case "lng" : return entity.getLng();
            case "alt" : return entity.getAlt();
            case "url" : return entity.getUrl();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Circuits entity, Column column, Object value) {
        switch (column.getName()) {
            case "circuitId" : entity.setCircuitId((Integer) value); break;
            case "circuitRef" : entity.setCircuitRef((String) value); break;
            case "name" : entity.setName((String) value); break;
            case "location" : entity.setLocation((String) value); break;
            case "country" : entity.setCountry((String) value); break;
            case "lat" : entity.setLat((Float) value); break;
            case "lng" : entity.setLng((Float) value); break;
            case "alt" : entity.setAlt((Integer) value); break;
            case "url" : entity.setUrl((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("db0.F1APP.circuits");
    }
    
    protected Circuits defaultReadEntity(ResultSet resultSet) {
        final Circuits entity = newInstance();
        try {
            entity.setCircuitId(circuitIdTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setCircuitRef(circuitRefTypeMapper.toJavaType(resultSet.getString(2)));
            entity.setName(nameTypeMapper.toJavaType(resultSet.getString(3)));
            entity.setLocation(locationTypeMapper.toJavaType(resultSet.getString(4)));
            entity.setCountry(countryTypeMapper.toJavaType(resultSet.getString(5)));
            entity.setLat(latTypeMapper.toJavaType(getFloat(resultSet, 6)));
            entity.setLng(lngTypeMapper.toJavaType(getFloat(resultSet, 7)));
            entity.setAlt(altTypeMapper.toJavaType(getInt(resultSet, 8)));
            entity.setUrl(urlTypeMapper.toJavaType(resultSet.getString(9)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Circuits newInstance() {
        return new CircuitsImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Circuits entity) {
        return entity.getCircuitId();
    }
}