package com.company.speedment.test.f1app.db0.f1app.seasons.impl;

import com.company.speedment.test.f1app.db0.f1app.seasons.Seasons;
import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@bd1d217.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class SeasonsManagerImpl extends AbstractSqlManager<Seasons> {
    
    private final TypeMapper<Integer, Integer> yearTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> urlTypeMapper = new StringIdentityMapper();
    
    public SeasonsManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Seasons> getEntityClass() {
        return Seasons.class;
    }
    
    @Override
    public Object get(Seasons entity, Column column) {
        switch (column.getName()) {
            case "year" : return entity.getYear();
            case "url" : return entity.getUrl();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Seasons entity, Column column, Object value) {
        switch (column.getName()) {
            case "year" : entity.setYear((Integer) value); break;
            case "url" : entity.setUrl((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("db0.F1APP.seasons");
    }
    
    protected Seasons defaultReadEntity(ResultSet resultSet) {
        final Seasons entity = newInstance();
        try {
            entity.setYear(yearTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setUrl(urlTypeMapper.toJavaType(resultSet.getString(2)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Seasons newInstance() {
        return new SeasonsImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Seasons entity) {
        return entity.getYear();
    }
}