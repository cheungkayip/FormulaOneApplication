package com.company.speedment.test.f1app.db0.f1app.circuits.impl;

import com.company.speedment.test.f1app.db0.f1app.circuits.Circuits;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@19756a05.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class CircuitsImpl extends AbstractBaseEntity<Circuits> implements Circuits {
    
    private Integer circuitId;
    private String circuitRef;
    private String name;
    private String location;
    private String country;
    private Float lat;
    private Float lng;
    private Integer alt;
    private String url;
    
    CircuitsImpl(Speedment speedment) {
        super(speedment);
    }
    
    public CircuitsImpl(Speedment speedment, final Circuits circuits) {
        super(speedment);
        setCircuitId(circuits.getCircuitId());
        setCircuitRef(circuits.getCircuitRef());
        setName(circuits.getName());
        circuits.getLocation().ifPresent(this::setLocation);
        circuits.getCountry().ifPresent(this::setCountry);
        circuits.getLat().ifPresent(this::setLat);
        circuits.getLng().ifPresent(this::setLng);
        circuits.getAlt().ifPresent(this::setAlt);
        setUrl(circuits.getUrl());
    }
    
    @Override
    public Integer getCircuitId() {
        return circuitId;
    }
    
    @Override
    public String getCircuitRef() {
        return circuitRef;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public Optional<String> getLocation() {
        return Optional.ofNullable(location);
    }
    
    @Override
    public Optional<String> getCountry() {
        return Optional.ofNullable(country);
    }
    
    @Override
    public Optional<Float> getLat() {
        return Optional.ofNullable(lat);
    }
    
    @Override
    public Optional<Float> getLng() {
        return Optional.ofNullable(lng);
    }
    
    @Override
    public Optional<Integer> getAlt() {
        return Optional.ofNullable(alt);
    }
    
    @Override
    public String getUrl() {
        return url;
    }
    
    @Override
    public final CircuitsImpl setCircuitId(Integer circuitId) {
        this.circuitId = circuitId;
        return this;
    }
    
    @Override
    public final CircuitsImpl setCircuitRef(String circuitRef) {
        this.circuitRef = circuitRef;
        return this;
    }
    
    @Override
    public final CircuitsImpl setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public final CircuitsImpl setLocation(String location) {
        this.location = location;
        return this;
    }
    
    @Override
    public final CircuitsImpl setCountry(String country) {
        this.country = country;
        return this;
    }
    
    @Override
    public final CircuitsImpl setLat(Float lat) {
        this.lat = lat;
        return this;
    }
    
    @Override
    public final CircuitsImpl setLng(Float lng) {
        this.lng = lng;
        return this;
    }
    
    @Override
    public final CircuitsImpl setAlt(Integer alt) {
        this.alt = alt;
        return this;
    }
    
    @Override
    public final CircuitsImpl setUrl(String url) {
        this.url = url;
        return this;
    }
    
    @Override
    public Circuits copy() {
        return new CircuitsImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("circuitId = "+Objects.toString(getCircuitId()));
        sj.add("circuitRef = "+Objects.toString(getCircuitRef()));
        sj.add("name = "+Objects.toString(getName()));
        sj.add("location = "+Objects.toString(getLocation().orElse(null)));
        sj.add("country = "+Objects.toString(getCountry().orElse(null)));
        sj.add("lat = "+Objects.toString(getLat().orElse(null)));
        sj.add("lng = "+Objects.toString(getLng().orElse(null)));
        sj.add("alt = "+Objects.toString(getAlt().orElse(null)));
        sj.add("url = "+Objects.toString(getUrl()));
        return "CircuitsImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Circuits)) { return false; }
        @SuppressWarnings("unchecked")
        final Circuits thatCircuits = (Circuits)that;
        if (!Objects.equals(this.getCircuitId(), thatCircuits.getCircuitId())) {return false; }
        if (!Objects.equals(this.getCircuitRef(), thatCircuits.getCircuitRef())) {return false; }
        if (!Objects.equals(this.getName(), thatCircuits.getName())) {return false; }
        if (!Objects.equals(this.getLocation(), thatCircuits.getLocation())) {return false; }
        if (!Objects.equals(this.getCountry(), thatCircuits.getCountry())) {return false; }
        if (!Objects.equals(this.getLat(), thatCircuits.getLat())) {return false; }
        if (!Objects.equals(this.getLng(), thatCircuits.getLng())) {return false; }
        if (!Objects.equals(this.getAlt(), thatCircuits.getAlt())) {return false; }
        if (!Objects.equals(this.getUrl(), thatCircuits.getUrl())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getCircuitId());
        hash = 31 * hash + Objects.hashCode(getCircuitRef());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getLocation());
        hash = 31 * hash + Objects.hashCode(getCountry());
        hash = 31 * hash + Objects.hashCode(getLat());
        hash = 31 * hash + Objects.hashCode(getLng());
        hash = 31 * hash + Objects.hashCode(getAlt());
        hash = 31 * hash + Objects.hashCode(getUrl());
        return hash;
    }
    
    @Override
    public Class<Circuits> getEntityClass_() {
        return Circuits.class;
    }
}