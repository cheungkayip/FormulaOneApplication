package com.company.speedment.test.f1app.db0.f1app.constructors.impl;

import com.company.speedment.test.f1app.db0.f1app.constructors.Constructors;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the Table
 * 'f1app.db0.F1APP.constructors'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class ConstructorsImpl extends AbstractBaseEntity<Constructors> implements Constructors {
    
    private Integer constructorId;
    private String constructorRef;
    private String name;
    private String nationality;
    private String url;
    
    ConstructorsImpl(Speedment speedment) {
        super(speedment);
    }
    
    public ConstructorsImpl(Speedment speedment, final Constructors constructors) {
        super(speedment);
        setConstructorId(constructors.getConstructorId());
        setConstructorRef(constructors.getConstructorRef());
        setName(constructors.getName());
        constructors.getNationality().ifPresent(this::setNationality);
        setUrl(constructors.getUrl());
    }
    
    @Override
    public Integer getConstructorId() {
        return constructorId;
    }
    
    @Override
    public String getConstructorRef() {
        return constructorRef;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public Optional<String> getNationality() {
        return Optional.ofNullable(nationality);
    }
    
    @Override
    public String getUrl() {
        return url;
    }
    
    @Override
    public final ConstructorsImpl setConstructorId(Integer constructorId) {
        this.constructorId = constructorId;
        return this;
    }
    
    @Override
    public final ConstructorsImpl setConstructorRef(String constructorRef) {
        this.constructorRef = constructorRef;
        return this;
    }
    
    @Override
    public final ConstructorsImpl setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public final ConstructorsImpl setNationality(String nationality) {
        this.nationality = nationality;
        return this;
    }
    
    @Override
    public final ConstructorsImpl setUrl(String url) {
        this.url = url;
        return this;
    }
    
    @Override
    public Constructors copy() {
        return new ConstructorsImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("constructorId = "+Objects.toString(getConstructorId()));
        sj.add("constructorRef = "+Objects.toString(getConstructorRef()));
        sj.add("name = "+Objects.toString(getName()));
        sj.add("nationality = "+Objects.toString(getNationality().orElse(null)));
        sj.add("url = "+Objects.toString(getUrl()));
        return "ConstructorsImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Constructors)) { return false; }
        @SuppressWarnings("unchecked")
        final Constructors thatConstructors = (Constructors)that;
        if (!Objects.equals(this.getConstructorId(), thatConstructors.getConstructorId())) {return false; }
        if (!Objects.equals(this.getConstructorRef(), thatConstructors.getConstructorRef())) {return false; }
        if (!Objects.equals(this.getName(), thatConstructors.getName())) {return false; }
        if (!Objects.equals(this.getNationality(), thatConstructors.getNationality())) {return false; }
        if (!Objects.equals(this.getUrl(), thatConstructors.getUrl())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getConstructorId());
        hash = 31 * hash + Objects.hashCode(getConstructorRef());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getNationality());
        hash = 31 * hash + Objects.hashCode(getUrl());
        return hash;
    }
    
    @Override
    public Class<Constructors> getEntityClass_() {
        return Constructors.class;
    }
}