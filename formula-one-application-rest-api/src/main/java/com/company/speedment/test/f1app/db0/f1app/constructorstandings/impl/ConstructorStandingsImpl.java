package com.company.speedment.test.f1app.db0.f1app.constructorstandings.impl;

import com.company.speedment.test.f1app.db0.f1app.constructorstandings.ConstructorStandings;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@20f8b966.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class ConstructorStandingsImpl extends AbstractBaseEntity<ConstructorStandings> implements ConstructorStandings {
    
    private Integer constructorStandingsId;
    private Integer raceId;
    private Integer constructorId;
    private Float points;
    private Integer position;
    private String positionText;
    private Integer wins;
    
    ConstructorStandingsImpl(Speedment speedment) {
        super(speedment);
    }
    
    public ConstructorStandingsImpl(Speedment speedment, final ConstructorStandings constructorStandings) {
        super(speedment);
        setConstructorStandingsId(constructorStandings.getConstructorStandingsId());
        setRaceId(constructorStandings.getRaceId());
        setConstructorId(constructorStandings.getConstructorId());
        setPoints(constructorStandings.getPoints());
        constructorStandings.getPosition().ifPresent(this::setPosition);
        constructorStandings.getPositionText().ifPresent(this::setPositionText);
        setWins(constructorStandings.getWins());
    }
    
    @Override
    public Integer getConstructorStandingsId() {
        return constructorStandingsId;
    }
    
    @Override
    public Integer getRaceId() {
        return raceId;
    }
    
    @Override
    public Integer getConstructorId() {
        return constructorId;
    }
    
    @Override
    public Float getPoints() {
        return points;
    }
    
    @Override
    public Optional<Integer> getPosition() {
        return Optional.ofNullable(position);
    }
    
    @Override
    public Optional<String> getPositionText() {
        return Optional.ofNullable(positionText);
    }
    
    @Override
    public Integer getWins() {
        return wins;
    }
    
    @Override
    public final ConstructorStandingsImpl setConstructorStandingsId(Integer constructorStandingsId) {
        this.constructorStandingsId = constructorStandingsId;
        return this;
    }
    
    @Override
    public final ConstructorStandingsImpl setRaceId(Integer raceId) {
        this.raceId = raceId;
        return this;
    }
    
    @Override
    public final ConstructorStandingsImpl setConstructorId(Integer constructorId) {
        this.constructorId = constructorId;
        return this;
    }
    
    @Override
    public final ConstructorStandingsImpl setPoints(Float points) {
        this.points = points;
        return this;
    }
    
    @Override
    public final ConstructorStandingsImpl setPosition(Integer position) {
        this.position = position;
        return this;
    }
    
    @Override
    public final ConstructorStandingsImpl setPositionText(String positionText) {
        this.positionText = positionText;
        return this;
    }
    
    @Override
    public final ConstructorStandingsImpl setWins(Integer wins) {
        this.wins = wins;
        return this;
    }
    
    @Override
    public ConstructorStandings copy() {
        return new ConstructorStandingsImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("constructorStandingsId = "+Objects.toString(getConstructorStandingsId()));
        sj.add("raceId = "+Objects.toString(getRaceId()));
        sj.add("constructorId = "+Objects.toString(getConstructorId()));
        sj.add("points = "+Objects.toString(getPoints()));
        sj.add("position = "+Objects.toString(getPosition().orElse(null)));
        sj.add("positionText = "+Objects.toString(getPositionText().orElse(null)));
        sj.add("wins = "+Objects.toString(getWins()));
        return "ConstructorStandingsImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof ConstructorStandings)) { return false; }
        @SuppressWarnings("unchecked")
        final ConstructorStandings thatConstructorStandings = (ConstructorStandings)that;
        if (!Objects.equals(this.getConstructorStandingsId(), thatConstructorStandings.getConstructorStandingsId())) {return false; }
        if (!Objects.equals(this.getRaceId(), thatConstructorStandings.getRaceId())) {return false; }
        if (!Objects.equals(this.getConstructorId(), thatConstructorStandings.getConstructorId())) {return false; }
        if (!Objects.equals(this.getPoints(), thatConstructorStandings.getPoints())) {return false; }
        if (!Objects.equals(this.getPosition(), thatConstructorStandings.getPosition())) {return false; }
        if (!Objects.equals(this.getPositionText(), thatConstructorStandings.getPositionText())) {return false; }
        if (!Objects.equals(this.getWins(), thatConstructorStandings.getWins())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getConstructorStandingsId());
        hash = 31 * hash + Objects.hashCode(getRaceId());
        hash = 31 * hash + Objects.hashCode(getConstructorId());
        hash = 31 * hash + Objects.hashCode(getPoints());
        hash = 31 * hash + Objects.hashCode(getPosition());
        hash = 31 * hash + Objects.hashCode(getPositionText());
        hash = 31 * hash + Objects.hashCode(getWins());
        return hash;
    }
    
    @Override
    public Class<ConstructorStandings> getEntityClass_() {
        return ConstructorStandings.class;
    }
}