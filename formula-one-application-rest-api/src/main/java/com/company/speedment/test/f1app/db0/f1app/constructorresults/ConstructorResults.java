package com.company.speedment.test.f1app.db0.f1app.constructorresults;

import com.speedment.Entity;
import com.speedment.field.ComparableField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the Table
 * 'f1app.db0.F1APP.constructorResults'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface ConstructorResults extends Entity<ConstructorResults> {
    
    /**
     * This Field corresponds to the {@link ConstructorResults} field that can be
     * obtained using the {@link ConstructorResults#getConstructorResultsId()}
     * method.
     */
    public final static ComparableField<ConstructorResults, Integer> CONSTRUCTORRESULTSID = new ComparableFieldImpl<>("constructorResultsId", ConstructorResults::getConstructorResultsId, ConstructorResults::setConstructorResultsId);
    /**
     * This Field corresponds to the {@link ConstructorResults} field that can be
     * obtained using the {@link ConstructorResults#getRaceId()} method.
     */
    public final static ComparableField<ConstructorResults, Integer> RACEID = new ComparableFieldImpl<>("raceId", ConstructorResults::getRaceId, ConstructorResults::setRaceId);
    /**
     * This Field corresponds to the {@link ConstructorResults} field that can be
     * obtained using the {@link ConstructorResults#getConstructorId()} method.
     */
    public final static ComparableField<ConstructorResults, Integer> CONSTRUCTORID = new ComparableFieldImpl<>("constructorId", ConstructorResults::getConstructorId, ConstructorResults::setConstructorId);
    /**
     * This Field corresponds to the {@link ConstructorResults} field that can be
     * obtained using the {@link ConstructorResults#getPoints()} method.
     */
    public final static ComparableField<ConstructorResults, Float> POINTS = new ComparableFieldImpl<>("points", o -> o.getPoints().orElse(null), ConstructorResults::setPoints);
    /**
     * This Field corresponds to the {@link ConstructorResults} field that can be
     * obtained using the {@link ConstructorResults#getStatus()} method.
     */
    public final static StringField<ConstructorResults> STATUS = new StringFieldImpl<>("status", o -> o.getStatus().orElse(null), ConstructorResults::setStatus);
    
    /**
     * Returns the constructorResultsId of this ConstructorResults. The
     * constructorResultsId field corresponds to the database column
     * db0.F1APP.constructorResults.constructorResultsId.
     * 
     * @return the constructorResultsId of this ConstructorResults
     */
    Integer getConstructorResultsId();
    
    /**
     * Returns the raceId of this ConstructorResults. The raceId field
     * corresponds to the database column db0.F1APP.constructorResults.raceId.
     * 
     * @return the raceId of this ConstructorResults
     */
    Integer getRaceId();
    
    /**
     * Returns the constructorId of this ConstructorResults. The constructorId
     * field corresponds to the database column
     * db0.F1APP.constructorResults.constructorId.
     * 
     * @return the constructorId of this ConstructorResults
     */
    Integer getConstructorId();
    
    /**
     * Returns the points of this ConstructorResults. The points field
     * corresponds to the database column db0.F1APP.constructorResults.points.
     * 
     * @return the points of this ConstructorResults
     */
    Optional<Float> getPoints();
    
    /**
     * Returns the status of this ConstructorResults. The status field
     * corresponds to the database column db0.F1APP.constructorResults.status.
     * 
     * @return the status of this ConstructorResults
     */
    Optional<String> getStatus();
    
    /**
     * Sets the constructorResultsId of this ConstructorResults. The
     * constructorResultsId field corresponds to the database column
     * db0.F1APP.constructorResults.constructorResultsId.
     * 
     * @param constructorResultsId to set of this ConstructorResults
     * @return this ConstructorResults instance
     */
    ConstructorResults setConstructorResultsId(Integer constructorResultsId);
    
    /**
     * Sets the raceId of this ConstructorResults. The raceId field corresponds
     * to the database column db0.F1APP.constructorResults.raceId.
     * 
     * @param raceId to set of this ConstructorResults
     * @return this ConstructorResults instance
     */
    ConstructorResults setRaceId(Integer raceId);
    
    /**
     * Sets the constructorId of this ConstructorResults. The constructorId field
     * corresponds to the database column
     * db0.F1APP.constructorResults.constructorId.
     * 
     * @param constructorId to set of this ConstructorResults
     * @return this ConstructorResults instance
     */
    ConstructorResults setConstructorId(Integer constructorId);
    
    /**
     * Sets the points of this ConstructorResults. The points field corresponds
     * to the database column db0.F1APP.constructorResults.points.
     * 
     * @param points to set of this ConstructorResults
     * @return this ConstructorResults instance
     */
    ConstructorResults setPoints(Float points);
    
    /**
     * Sets the status of this ConstructorResults. The status field corresponds
     * to the database column db0.F1APP.constructorResults.status.
     * 
     * @param status to set of this ConstructorResults
     * @return this ConstructorResults instance
     */
    ConstructorResults setStatus(String status);
}