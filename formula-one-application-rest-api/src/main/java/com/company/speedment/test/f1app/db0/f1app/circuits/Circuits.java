package com.company.speedment.test.f1app.db0.f1app.circuits;

import com.speedment.Entity;
import com.speedment.field.ComparableField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@19756a05.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface Circuits extends Entity<Circuits> {
    
    /**
     * This Field corresponds to the {@link Circuits} field that can be obtained
     * using the {@link Circuits#getCircuitId()} method.
     */
    public final static ComparableField<Circuits, Integer> CIRCUITID = new ComparableFieldImpl<>("circuitId", Circuits::getCircuitId, Circuits::setCircuitId);
    /**
     * This Field corresponds to the {@link Circuits} field that can be obtained
     * using the {@link Circuits#getCircuitRef()} method.
     */
    public final static StringField<Circuits> CIRCUITREF = new StringFieldImpl<>("circuitRef", Circuits::getCircuitRef, Circuits::setCircuitRef);
    /**
     * This Field corresponds to the {@link Circuits} field that can be obtained
     * using the {@link Circuits#getName()} method.
     */
    public final static StringField<Circuits> NAME = new StringFieldImpl<>("name", Circuits::getName, Circuits::setName);
    /**
     * This Field corresponds to the {@link Circuits} field that can be obtained
     * using the {@link Circuits#getLocation()} method.
     */
    public final static StringField<Circuits> LOCATION = new StringFieldImpl<>("location", o -> o.getLocation().orElse(null), Circuits::setLocation);
    /**
     * This Field corresponds to the {@link Circuits} field that can be obtained
     * using the {@link Circuits#getCountry()} method.
     */
    public final static StringField<Circuits> COUNTRY = new StringFieldImpl<>("country", o -> o.getCountry().orElse(null), Circuits::setCountry);
    /**
     * This Field corresponds to the {@link Circuits} field that can be obtained
     * using the {@link Circuits#getLat()} method.
     */
    public final static ComparableField<Circuits, Float> LAT = new ComparableFieldImpl<>("lat", o -> o.getLat().orElse(null), Circuits::setLat);
    /**
     * This Field corresponds to the {@link Circuits} field that can be obtained
     * using the {@link Circuits#getLng()} method.
     */
    public final static ComparableField<Circuits, Float> LNG = new ComparableFieldImpl<>("lng", o -> o.getLng().orElse(null), Circuits::setLng);
    /**
     * This Field corresponds to the {@link Circuits} field that can be obtained
     * using the {@link Circuits#getAlt()} method.
     */
    public final static ComparableField<Circuits, Integer> ALT = new ComparableFieldImpl<>("alt", o -> o.getAlt().orElse(null), Circuits::setAlt);
    /**
     * This Field corresponds to the {@link Circuits} field that can be obtained
     * using the {@link Circuits#getUrl()} method.
     */
    public final static StringField<Circuits> URL = new StringFieldImpl<>("url", Circuits::getUrl, Circuits::setUrl);
    
    /**
     * Returns the circuitId of this Circuits. The circuitId field corresponds to
     * the database column db0.F1APP.circuits.circuitId.
     * 
     * @return the circuitId of this Circuits
     */
    Integer getCircuitId();
    
    /**
     * Returns the circuitRef of this Circuits. The circuitRef field corresponds
     * to the database column db0.F1APP.circuits.circuitRef.
     * 
     * @return the circuitRef of this Circuits
     */
    String getCircuitRef();
    
    /**
     * Returns the name of this Circuits. The name field corresponds to the
     * database column db0.F1APP.circuits.name.
     * 
     * @return the name of this Circuits
     */
    String getName();
    
    /**
     * Returns the location of this Circuits. The location field corresponds to
     * the database column db0.F1APP.circuits.location.
     * 
     * @return the location of this Circuits
     */
    Optional<String> getLocation();
    
    /**
     * Returns the country of this Circuits. The country field corresponds to the
     * database column db0.F1APP.circuits.country.
     * 
     * @return the country of this Circuits
     */
    Optional<String> getCountry();
    
    /**
     * Returns the lat of this Circuits. The lat field corresponds to the
     * database column db0.F1APP.circuits.lat.
     * 
     * @return the lat of this Circuits
     */
    Optional<Float> getLat();
    
    /**
     * Returns the lng of this Circuits. The lng field corresponds to the
     * database column db0.F1APP.circuits.lng.
     * 
     * @return the lng of this Circuits
     */
    Optional<Float> getLng();
    
    /**
     * Returns the alt of this Circuits. The alt field corresponds to the
     * database column db0.F1APP.circuits.alt.
     * 
     * @return the alt of this Circuits
     */
    Optional<Integer> getAlt();
    
    /**
     * Returns the url of this Circuits. The url field corresponds to the
     * database column db0.F1APP.circuits.url.
     * 
     * @return the url of this Circuits
     */
    String getUrl();
    
    /**
     * Sets the circuitId of this Circuits. The circuitId field corresponds to
     * the database column db0.F1APP.circuits.circuitId.
     * 
     * @param circuitId to set of this Circuits
     * @return this Circuits instance
     */
    Circuits setCircuitId(Integer circuitId);
    
    /**
     * Sets the circuitRef of this Circuits. The circuitRef field corresponds to
     * the database column db0.F1APP.circuits.circuitRef.
     * 
     * @param circuitRef to set of this Circuits
     * @return this Circuits instance
     */
    Circuits setCircuitRef(String circuitRef);
    
    /**
     * Sets the name of this Circuits. The name field corresponds to the database
     * column db0.F1APP.circuits.name.
     * 
     * @param name to set of this Circuits
     * @return this Circuits instance
     */
    Circuits setName(String name);
    
    /**
     * Sets the location of this Circuits. The location field corresponds to the
     * database column db0.F1APP.circuits.location.
     * 
     * @param location to set of this Circuits
     * @return this Circuits instance
     */
    Circuits setLocation(String location);
    
    /**
     * Sets the country of this Circuits. The country field corresponds to the
     * database column db0.F1APP.circuits.country.
     * 
     * @param country to set of this Circuits
     * @return this Circuits instance
     */
    Circuits setCountry(String country);
    
    /**
     * Sets the lat of this Circuits. The lat field corresponds to the database
     * column db0.F1APP.circuits.lat.
     * 
     * @param lat to set of this Circuits
     * @return this Circuits instance
     */
    Circuits setLat(Float lat);
    
    /**
     * Sets the lng of this Circuits. The lng field corresponds to the database
     * column db0.F1APP.circuits.lng.
     * 
     * @param lng to set of this Circuits
     * @return this Circuits instance
     */
    Circuits setLng(Float lng);
    
    /**
     * Sets the alt of this Circuits. The alt field corresponds to the database
     * column db0.F1APP.circuits.alt.
     * 
     * @param alt to set of this Circuits
     * @return this Circuits instance
     */
    Circuits setAlt(Integer alt);
    
    /**
     * Sets the url of this Circuits. The url field corresponds to the database
     * column db0.F1APP.circuits.url.
     * 
     * @param url to set of this Circuits
     * @return this Circuits instance
     */
    Circuits setUrl(String url);
}