package com.company.speedment.test.f1app.db0.f1app.driverstandings.impl;

import com.company.speedment.test.f1app.db0.f1app.driverstandings.DriverStandings;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@207606ed.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class DriverStandingsImpl extends AbstractBaseEntity<DriverStandings> implements DriverStandings {
    
    private Integer driverStandingsId;
    private Integer raceId;
    private Integer driverId;
    private Float points;
    private Integer position;
    private String positionText;
    private Integer wins;
    
    DriverStandingsImpl(Speedment speedment) {
        super(speedment);
    }
    
    public DriverStandingsImpl(Speedment speedment, final DriverStandings driverStandings) {
        super(speedment);
        setDriverStandingsId(driverStandings.getDriverStandingsId());
        setRaceId(driverStandings.getRaceId());
        setDriverId(driverStandings.getDriverId());
        setPoints(driverStandings.getPoints());
        driverStandings.getPosition().ifPresent(this::setPosition);
        driverStandings.getPositionText().ifPresent(this::setPositionText);
        setWins(driverStandings.getWins());
    }
    
    @Override
    public Integer getDriverStandingsId() {
        return driverStandingsId;
    }
    
    @Override
    public Integer getRaceId() {
        return raceId;
    }
    
    @Override
    public Integer getDriverId() {
        return driverId;
    }
    
    @Override
    public Float getPoints() {
        return points;
    }
    
    @Override
    public Optional<Integer> getPosition() {
        return Optional.ofNullable(position);
    }
    
    @Override
    public Optional<String> getPositionText() {
        return Optional.ofNullable(positionText);
    }
    
    @Override
    public Integer getWins() {
        return wins;
    }
    
    @Override
    public final DriverStandingsImpl setDriverStandingsId(Integer driverStandingsId) {
        this.driverStandingsId = driverStandingsId;
        return this;
    }
    
    @Override
    public final DriverStandingsImpl setRaceId(Integer raceId) {
        this.raceId = raceId;
        return this;
    }
    
    @Override
    public final DriverStandingsImpl setDriverId(Integer driverId) {
        this.driverId = driverId;
        return this;
    }
    
    @Override
    public final DriverStandingsImpl setPoints(Float points) {
        this.points = points;
        return this;
    }
    
    @Override
    public final DriverStandingsImpl setPosition(Integer position) {
        this.position = position;
        return this;
    }
    
    @Override
    public final DriverStandingsImpl setPositionText(String positionText) {
        this.positionText = positionText;
        return this;
    }
    
    @Override
    public final DriverStandingsImpl setWins(Integer wins) {
        this.wins = wins;
        return this;
    }
    
    @Override
    public DriverStandings copy() {
        return new DriverStandingsImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("driverStandingsId = "+Objects.toString(getDriverStandingsId()));
        sj.add("raceId = "+Objects.toString(getRaceId()));
        sj.add("driverId = "+Objects.toString(getDriverId()));
        sj.add("points = "+Objects.toString(getPoints()));
        sj.add("position = "+Objects.toString(getPosition().orElse(null)));
        sj.add("positionText = "+Objects.toString(getPositionText().orElse(null)));
        sj.add("wins = "+Objects.toString(getWins()));
        return "DriverStandingsImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof DriverStandings)) { return false; }
        @SuppressWarnings("unchecked")
        final DriverStandings thatDriverStandings = (DriverStandings)that;
        if (!Objects.equals(this.getDriverStandingsId(), thatDriverStandings.getDriverStandingsId())) {return false; }
        if (!Objects.equals(this.getRaceId(), thatDriverStandings.getRaceId())) {return false; }
        if (!Objects.equals(this.getDriverId(), thatDriverStandings.getDriverId())) {return false; }
        if (!Objects.equals(this.getPoints(), thatDriverStandings.getPoints())) {return false; }
        if (!Objects.equals(this.getPosition(), thatDriverStandings.getPosition())) {return false; }
        if (!Objects.equals(this.getPositionText(), thatDriverStandings.getPositionText())) {return false; }
        if (!Objects.equals(this.getWins(), thatDriverStandings.getWins())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getDriverStandingsId());
        hash = 31 * hash + Objects.hashCode(getRaceId());
        hash = 31 * hash + Objects.hashCode(getDriverId());
        hash = 31 * hash + Objects.hashCode(getPoints());
        hash = 31 * hash + Objects.hashCode(getPosition());
        hash = 31 * hash + Objects.hashCode(getPositionText());
        hash = 31 * hash + Objects.hashCode(getWins());
        return hash;
    }
    
    @Override
    public Class<DriverStandings> getEntityClass_() {
        return DriverStandings.class;
    }
}