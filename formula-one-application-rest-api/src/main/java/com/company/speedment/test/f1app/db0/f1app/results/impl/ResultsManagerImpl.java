package com.company.speedment.test.f1app.db0.f1app.results.impl;

import com.company.speedment.test.f1app.db0.f1app.results.Results;
import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.FloatIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@9dd2e72.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class ResultsManagerImpl extends AbstractSqlManager<Results> {
    
    private final TypeMapper<Integer, Integer> resultIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> raceIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> driverIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> constructorIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> numberTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> gridTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> positionTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> positionTextTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> positionOrderTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Float, Float> pointsTypeMapper = new FloatIdentityMapper();
    private final TypeMapper<Integer, Integer> lapsTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> timeTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> millisecondsTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> fastestLapTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> rankTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> fastestLapTimeTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> fastestLapSpeedTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> statusIdTypeMapper = new IntegerIdentityMapper();
    
    public ResultsManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Results> getEntityClass() {
        return Results.class;
    }
    
    @Override
    public Object get(Results entity, Column column) {
        switch (column.getName()) {
            case "resultId" : return entity.getResultId();
            case "raceId" : return entity.getRaceId();
            case "driverId" : return entity.getDriverId();
            case "constructorId" : return entity.getConstructorId();
            case "number" : return entity.getNumber();
            case "grid" : return entity.getGrid();
            case "position" : return entity.getPosition();
            case "positionText" : return entity.getPositionText();
            case "positionOrder" : return entity.getPositionOrder();
            case "points" : return entity.getPoints();
            case "laps" : return entity.getLaps();
            case "time" : return entity.getTime();
            case "milliseconds" : return entity.getMilliseconds();
            case "fastestLap" : return entity.getFastestLap();
            case "rank" : return entity.getRank();
            case "fastestLapTime" : return entity.getFastestLapTime();
            case "fastestLapSpeed" : return entity.getFastestLapSpeed();
            case "statusId" : return entity.getStatusId();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Results entity, Column column, Object value) {
        switch (column.getName()) {
            case "resultId" : entity.setResultId((Integer) value); break;
            case "raceId" : entity.setRaceId((Integer) value); break;
            case "driverId" : entity.setDriverId((Integer) value); break;
            case "constructorId" : entity.setConstructorId((Integer) value); break;
            case "number" : entity.setNumber((Integer) value); break;
            case "grid" : entity.setGrid((Integer) value); break;
            case "position" : entity.setPosition((Integer) value); break;
            case "positionText" : entity.setPositionText((String) value); break;
            case "positionOrder" : entity.setPositionOrder((Integer) value); break;
            case "points" : entity.setPoints((Float) value); break;
            case "laps" : entity.setLaps((Integer) value); break;
            case "time" : entity.setTime((String) value); break;
            case "milliseconds" : entity.setMilliseconds((Integer) value); break;
            case "fastestLap" : entity.setFastestLap((Integer) value); break;
            case "rank" : entity.setRank((Integer) value); break;
            case "fastestLapTime" : entity.setFastestLapTime((String) value); break;
            case "fastestLapSpeed" : entity.setFastestLapSpeed((String) value); break;
            case "statusId" : entity.setStatusId((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("db0.F1APP.results");
    }
    
    protected Results defaultReadEntity(ResultSet resultSet) {
        final Results entity = newInstance();
        try {
            entity.setResultId(resultIdTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setRaceId(raceIdTypeMapper.toJavaType(resultSet.getInt(2)));
            entity.setDriverId(driverIdTypeMapper.toJavaType(resultSet.getInt(3)));
            entity.setConstructorId(constructorIdTypeMapper.toJavaType(resultSet.getInt(4)));
            entity.setNumber(numberTypeMapper.toJavaType(resultSet.getInt(5)));
            entity.setGrid(gridTypeMapper.toJavaType(resultSet.getInt(6)));
            entity.setPosition(positionTypeMapper.toJavaType(getInt(resultSet, 7)));
            entity.setPositionText(positionTextTypeMapper.toJavaType(resultSet.getString(8)));
            entity.setPositionOrder(positionOrderTypeMapper.toJavaType(resultSet.getInt(9)));
            entity.setPoints(pointsTypeMapper.toJavaType(resultSet.getFloat(10)));
            entity.setLaps(lapsTypeMapper.toJavaType(resultSet.getInt(11)));
            entity.setTime(timeTypeMapper.toJavaType(resultSet.getString(12)));
            entity.setMilliseconds(millisecondsTypeMapper.toJavaType(getInt(resultSet, 13)));
            entity.setFastestLap(fastestLapTypeMapper.toJavaType(getInt(resultSet, 14)));
            entity.setRank(rankTypeMapper.toJavaType(getInt(resultSet, 15)));
            entity.setFastestLapTime(fastestLapTimeTypeMapper.toJavaType(resultSet.getString(16)));
            entity.setFastestLapSpeed(fastestLapSpeedTypeMapper.toJavaType(resultSet.getString(17)));
            entity.setStatusId(statusIdTypeMapper.toJavaType(resultSet.getInt(18)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Results newInstance() {
        return new ResultsImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Results entity) {
        return entity.getResultId();
    }
}