package com.company.speedment.test.f1app.db0.f1app.constructorstandings.impl;

import com.company.speedment.test.f1app.db0.f1app.constructorstandings.ConstructorStandings;
import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.FloatIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the Table 'f1app.db0.F1APP.constructorStandings'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class ConstructorStandingsManagerImpl extends AbstractSqlManager<ConstructorStandings> {
    
    private final TypeMapper<Integer, Integer> constructorStandingsIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> raceIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> constructorIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Float, Float> pointsTypeMapper = new FloatIdentityMapper();
    private final TypeMapper<Integer, Integer> positionTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> positionTextTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> winsTypeMapper = new IntegerIdentityMapper();
    
    public ConstructorStandingsManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<ConstructorStandings> getEntityClass() {
        return ConstructorStandings.class;
    }
    
    @Override
    public Object get(ConstructorStandings entity, Column column) {
        switch (column.getName()) {
            case "constructorStandingsId" : return entity.getConstructorStandingsId();
            case "raceId" : return entity.getRaceId();
            case "constructorId" : return entity.getConstructorId();
            case "points" : return entity.getPoints();
            case "position" : return entity.getPosition();
            case "positionText" : return entity.getPositionText();
            case "wins" : return entity.getWins();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(ConstructorStandings entity, Column column, Object value) {
        switch (column.getName()) {
            case "constructorStandingsId" : entity.setConstructorStandingsId((Integer) value); break;
            case "raceId" : entity.setRaceId((Integer) value); break;
            case "constructorId" : entity.setConstructorId((Integer) value); break;
            case "points" : entity.setPoints((Float) value); break;
            case "position" : entity.setPosition((Integer) value); break;
            case "positionText" : entity.setPositionText((String) value); break;
            case "wins" : entity.setWins((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("db0.F1APP.constructorStandings");
    }
    
    protected ConstructorStandings defaultReadEntity(ResultSet resultSet) {
        final ConstructorStandings entity = newInstance();
        try {
            entity.setConstructorStandingsId(constructorStandingsIdTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setRaceId(raceIdTypeMapper.toJavaType(resultSet.getInt(2)));
            entity.setConstructorId(constructorIdTypeMapper.toJavaType(resultSet.getInt(3)));
            entity.setPoints(pointsTypeMapper.toJavaType(resultSet.getFloat(4)));
            entity.setPosition(positionTypeMapper.toJavaType(getInt(resultSet, 5)));
            entity.setPositionText(positionTextTypeMapper.toJavaType(resultSet.getString(6)));
            entity.setWins(winsTypeMapper.toJavaType(resultSet.getInt(7)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public ConstructorStandings newInstance() {
        return new ConstructorStandingsImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(ConstructorStandings entity) {
        return entity.getConstructorStandingsId();
    }
}